base {
  log_debug = on;
  log_info = on;
  log = "stderr";
  daemon = off;
  user = redsocks;
  group = redsocks;
  redirector = iptables;
}

redsocks {
	/* `bind' defaults to 127.0.0.1:0 for security reasons,
	 * use 0.0.0.0 if you want to listen on every interface.
	 * `bind' are used as ip:port to redirect to.
	 */
	bind = "0.0.0.0:12345";

	// listen() queue length. Default value is SOMAXCONN and it should be
	// good enough for most of us.
	// listenq = 128; // SOMAXCONN equals 128 on my Linux box.

	// `max_accept_backoff` is a delay to retry `accept()` after accept
	// failure (e.g. due to lack of file descriptors). It's measured in
	// milliseconds and maximal value is 65535. `min_accept_backoff` is
	// used as initial backoff value and as a damper for `accept() after
	// close()` logic.
	// min_accept_backoff = 100;
	// max_accept_backoff = 60000;

	// `relay` is IP address and port of proxy-server. Domain name is not
	// supported yet.
	// Can be:
	//     [IPv6Address]:port
	//     [IPv6Address]
	//     IPv6Address
	//     IPv4Address:port
	//     IPv4Address
	// If no port is given, 0 is used. Usually, a valid port is required.
	relay = "127.0.0.1:7777";

	// known types: socks4, socks5, http-connect, http-relay
	// New types: direct, shadowsocks, https-connect
	// For type direct:
	//     if `relay` is not specified, connections will be forwarded to
	// original destinations.
	//     if `relay` is filled with valid IP address, connections will be
	// forwarded to IP address defined in `relay`. It is useful when you
	// just want to forward connections to a specific IP address without
	// transparent proxy. E.g. forward IPv4:port to IPv6:port.
	type = socks5;

	// Specify interface for outgoing connections.
	// This is useful when you have multiple connections to
	// internet or when you have VPN connections.
	// interface = tun0;

	// Change this parameter to 1 if you want auto proxy feature. 
	// When autoproxy is set to non-zero, the connection to target
	// will be made directly first. If direct connection to target
	// fails for timeout/connection refuse, redsocks will try to
	// connect to target via the proxy.
	autoproxy = 0;
	// timeout is meaningful when 'autoproxy' is non-zero.
	// It specified timeout value when trying to connect to destination
	// directly. Default is 10 seconds. When it is set to 0, default
	// timeout value will be used.
	timeout = 10;
}

redudp {
	// `bind' should not be 0.0.0.0:0 as it's also used for outgoing
	// packets that are sent as replies - and it should be fixed
	// if we want NAT to work properly.
	bind = "127.0.0.1:10053";

	// `relay' is ip and port of socks5 proxy server.
	relay = "10.0.0.1:7777";
	// login = username;// field 'login' is reused as encryption
					   // method of shadowsocks
	// password = pazzw0rd;

	// know types: socks5, shadowsocks
	type = socks5;

	// redsocks knows about two options while redirecting UDP packets at
	// linux: TPROXY and REDIRECT.  TPROXY requires more complex routing
	// configuration and fresh kernel (>= 2.6.37 according to squid
	// developers[1]) but has hack-free way to get original destination
	// address, REDIRECT is easier to configure, but requires `dest`
	// to be set, limiting packet redirection to single destination.
	// [1] http://wiki.squid-cache.org/Features/Tproxy4
	dest = "1.1.1.1:53";

	// Do not set it large if this section is for DNS requests. Otherwise,
	// you may encounter out of file descriptor problem. For DNS requests,
	// 10s is adequate.
	udp_timeout = 30;
	// udp_timeout_stream = 180;
}

// you can add more `redsocks' and `redudp' sections if you need.


