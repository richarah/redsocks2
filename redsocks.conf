base {
  log_debug = on;
  log_info = on;
  log = "stderr";
  daemon = off;
  user = redsocks;
  group = redsocks;
  redirector = iptables;
}

redudp {
	// `bind' should not be 0.0.0.0:0 as it's also used for outgoing
	// packets that are sent as replies - and it should be fixed
	// if we want NAT to work properly.
	bind = "127.0.0.1:10053";

	// `relay' is ip and port of socks5 proxy server.
	relay = "127.0.0.1:7777";
	// login = username;// field 'login' is reused as encryption
					   // method of shadowsocks
	// password = pazzw0rd;

	// know types: socks5, shadowsocks
	type = socks5;

	// redsocks knows about two options while redirecting UDP packets at
	// linux: TPROXY and REDIRECT.  TPROXY requires more complex routing
	// configuration and fresh kernel (>= 2.6.37 according to squid
	// developers[1]) but has hack-free way to get original destination
	// address, REDIRECT is easier to configure, but requires `dest`
	// to be set, limiting packet redirection to single destination.
	// [1] http://wiki.squid-cache.org/Features/Tproxy4
	dest = "1.1.1.1:53";

	// Do not set it large if this section is for DNS requests. Otherwise,
	// you may encounter out of file descriptor problem. For DNS requests,
	// 10s is adequate.
	udp_timeout = 10;
	// udp_timeout_stream = 180;
}

tcpdns {
	// Transform UDP DNS requests into TCP DNS requests.
	// You can also redirect connections to external TCP DNS server to
	// REDSOCKS transparent proxy via iptables.
bind = "127.0.0.1:1053"; // Local server to act as DNS server
        tcpdns1 = "8.8.4.4:53";    // DNS server that supports TCP DNS requests
	tcpdns2 = 1.1.1.1;      // DNS server that supports TCP DNS requests
	timeout = 10;            // Timeout value for TCP DNS requests
}
